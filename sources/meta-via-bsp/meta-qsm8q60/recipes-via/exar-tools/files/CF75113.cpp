#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "CVLog.h"
#include "CF75113.h"

#define	F75113_BUSNO					0
#define	F75113_SLAVE					0x37

#define	F75113_OFFSET_CHIPID			0x5A
#define	F75113_OFFSET_VENDERID			0x5D
#define	F75113_CHIPVENDERID				0x34191110

#define	F75113_GPIO4X_CONTROL			0x70
#define	F75113_GPIO4X_OUTPUTDATA		0x71
#define	F75113_GPIO4X_STATUS			0x72

#define	F75113_MODULE0					0
#define	F75113_MODULE1					1
#define	F75113_MODULE2					2
#define	F75113_MODULE3					3

#define	F75113_MODULE0_MASK				0x03
#define	F75113_MODULE0_RS232			0x02
#define	F75113_MODULE0_RS422			0x00
#define	F75113_MODULE0_RS485			0x03

#define	F75113_MODULE1_MASK				0x0C
#define	F75113_MODULE1_RS232			0x08
#define	F75113_MODULE1_RS422			0x00
#define	F75113_MODULE1_RS485			0x0C

#define	F75113_MODULE2_MASK				0xC0
#define	F75113_MODULE2_RS232			0x40
#define	F75113_MODULE2_RS422			0x00
#define	F75113_MODULE2_RS485			0xC0

#define	F75113_MODULE3_MASK				0x30
#define	F75113_MODULE3_RS232			0x10
#define	F75113_MODULE3_RS422			0x00
#define	F75113_MODULE3_RS485			0x30


/* ============================= CF75113 CLASS ========================== */
CF75113::CF75113()
{
}


CF75113::~CF75113()
{
}


bool CF75113::CheckChipID()
{
	char sData[4] = {0};

	if(Read(F75113_BUSNO, F75113_SLAVE, F75113_OFFSET_CHIPID, sData) && Read(F75113_BUSNO, F75113_SLAVE, F75113_OFFSET_CHIPID + 1, sData + 1) &&
		Read(F75113_BUSNO, F75113_SLAVE, F75113_OFFSET_VENDERID, sData + 2) && Read(F75113_BUSNO, F75113_SLAVE, F75113_OFFSET_VENDERID + 1, sData + 3) &&
		(F75113_CHIPVENDERID == *((int *) sData)))
	{
		return true;
	}
	
	return false;
}


void CF75113::SetValue(char cOffset, char cMask, char cValue)
{
	char cData = 0;
	
	Read(F75113_BUSNO, F75113_SLAVE, cOffset, &cData);
	Write(F75113_BUSNO, F75113_SLAVE, cOffset, ((cData & (~cMask)) | cValue));
}


bool CF75113::SetRS232(int nChannel)
{
	if(!CheckChipID())
		return false;
		
	switch(nChannel)
	{
		case F75113_MODULE0:
			SetValue(F75113_GPIO4X_CONTROL, F75113_MODULE0_MASK, F75113_MODULE0_MASK);
			SetValue(F75113_GPIO4X_OUTPUTDATA, F75113_MODULE0_MASK, F75113_MODULE0_RS232);
			return true;
		case F75113_MODULE1:
			SetValue(F75113_GPIO4X_CONTROL, F75113_MODULE1_MASK, F75113_MODULE1_MASK);
			SetValue(F75113_GPIO4X_OUTPUTDATA, F75113_MODULE1_MASK, F75113_MODULE1_RS232);
			return true;
		case F75113_MODULE2:
			SetValue(F75113_GPIO4X_CONTROL, F75113_MODULE2_MASK, F75113_MODULE2_MASK);
			SetValue(F75113_GPIO4X_OUTPUTDATA, F75113_MODULE2_MASK, F75113_MODULE2_RS232);
			return true;
		case F75113_MODULE3:
			SetValue(F75113_GPIO4X_CONTROL, F75113_MODULE3_MASK, F75113_MODULE3_MASK);
			SetValue(F75113_GPIO4X_OUTPUTDATA, F75113_MODULE3_MASK, F75113_MODULE3_RS232);
			return true;
	}

	return false;
}


bool CF75113::SetRS422(int nChannel)
{
	if(!CheckChipID())
		return false;
		
	switch(nChannel)
	{
		case F75113_MODULE0:
			SetValue(F75113_GPIO4X_CONTROL, F75113_MODULE0_MASK, F75113_MODULE0_MASK);
			SetValue(F75113_GPIO4X_OUTPUTDATA, F75113_MODULE0_MASK, F75113_MODULE0_RS422);
			return true;
		case F75113_MODULE1:
			SetValue(F75113_GPIO4X_CONTROL, F75113_MODULE1_MASK, F75113_MODULE1_MASK);
			SetValue(F75113_GPIO4X_OUTPUTDATA, F75113_MODULE1_MASK, F75113_MODULE1_RS422);
			return true;
		case F75113_MODULE2:
			SetValue(F75113_GPIO4X_CONTROL, F75113_MODULE2_MASK, F75113_MODULE2_MASK);
			SetValue(F75113_GPIO4X_OUTPUTDATA, F75113_MODULE2_MASK, F75113_MODULE2_RS422);
			return true;
		case F75113_MODULE3:
			SetValue(F75113_GPIO4X_CONTROL, F75113_MODULE3_MASK, F75113_MODULE3_MASK);
			SetValue(F75113_GPIO4X_OUTPUTDATA, F75113_MODULE3_MASK, F75113_MODULE3_RS422);
			return true;
	}

	return false;
}


bool CF75113::SetRS485(int nChannel)
{
	if(!CheckChipID())
		return false;
		
	switch(nChannel)
	{
		case F75113_MODULE0:
			SetValue(F75113_GPIO4X_CONTROL, F75113_MODULE0_MASK, F75113_MODULE0_MASK);
			SetValue(F75113_GPIO4X_OUTPUTDATA, F75113_MODULE0_MASK, F75113_MODULE0_RS485);
			return true;
		case F75113_MODULE1:
			SetValue(F75113_GPIO4X_CONTROL, F75113_MODULE1_MASK, F75113_MODULE1_MASK);
			SetValue(F75113_GPIO4X_OUTPUTDATA, F75113_MODULE1_MASK, F75113_MODULE1_RS485);
			return true;
		case F75113_MODULE2:
			SetValue(F75113_GPIO4X_CONTROL, F75113_MODULE2_MASK, F75113_MODULE2_MASK);
			SetValue(F75113_GPIO4X_OUTPUTDATA, F75113_MODULE2_MASK, F75113_MODULE2_RS485);
			return true;
		case F75113_MODULE3:
			SetValue(F75113_GPIO4X_CONTROL, F75113_MODULE3_MASK, F75113_MODULE3_MASK);
			SetValue(F75113_GPIO4X_OUTPUTDATA, F75113_MODULE3_MASK, F75113_MODULE3_RS485);
			return true;
	}

	return false;
}
